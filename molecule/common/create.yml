---

- hosts: localhost
  connection: local
  gather_facts: no
  vars_files:
    - config_vars.yml
  tasks:

    # Docker Driver
    - block:

        - name: Create the target Platform Dockerfile
          template:
            src: "{{ docker_image_template[molecule_target_distro] }}"
            dest: "{{ molecule_ephemeral_directory }}/Dockerfile_{{ molecule_target_distro }}"
          register: _dockerfile

        - name: Discover the Platform Docker image
          docker_image_facts:
            name: "{{ docker_image_name }}"
          register: _image

        - name: Build an Ansible compatible image for the target Platform
          docker_image:
            name: "{{ docker_image_name }}"
            dockerfile: "{{ _dockerfile['path'] }}"
            path: "{{ molecule_ephemeral_directory }}"
            force: "yes"
          when: _dockerfile.changed or _image['images'] | select('equalto', []) | list | count >= 0

        - name: Create the target Platform instance(s)
          docker_container:
            name: "{{ item.name }}"
            hostname: "{{ item.name }}"
            image: "{{ docker_image_name }}"
            state: started
            recreate: False
            log_driver: syslog
            privileged: "yes"
            volumes:
              # Mount the cgroups fs to allow SystemD to run into the containers
              - "/sys/fs/cgroup:/sys/fs/cgroup:ro"
          with_items: "{{ molecule_yml.platforms }}"

      when: molecule_driver_name == 'docker'

    # Vagrant Driver
    - block:

        - name: Create molecule Vagrant instance(s)
          molecule_vagrant:
            instance_name: "{{ item.name }}"
            platform_box: "{{ vagrant_base_image[molecule_target_distro] }}"
            provider_memory: 2048
            provider_cpus: 2
            instance_interfaces:
              - auto_config: true
                network_name: private_network
                type: dhcp
            state: "up"
          register: server
          with_items: "{{ molecule_yml.platforms }}"

        # Mandatory configuration for Molecule to function.

        - name: Populate instance config dict
          set_fact:
            instance_conf_dict: {
              'instance': "{{ item.Host }}",
              'address': "{{ item.HostName }}",
              'user': "{{ item.User }}",
              'port': "{{ item.Port }}",
              'identity_file': "{{ item.IdentityFile }}", }
          with_items: "{{ server.results }}"
          register: instance_config_dict
          when: server.changed | bool

        - name: Convert instance config dict to a list
          set_fact:
            instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
          when: server.changed | bool

        - name: Dump instance config
          copy:
            # Workaround for Ansible 2.2.
            # https://github.com/ansible/ansible/issues/20885
            content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
            dest: "{{ molecule_instance_config }}"
          when: server.changed | bool

      when: molecule_driver_name == 'vagrant'
